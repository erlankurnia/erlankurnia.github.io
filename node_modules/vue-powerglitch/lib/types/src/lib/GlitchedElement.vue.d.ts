declare const _default: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            options: Record<string, any>;
            inline: boolean;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            /**
             * Options passed to PowerGlitch.
             * @remarks
             * The only option which will be ignored is `createContainers`, as this component always set this value to false.
             */
            options: {
                type: ObjectConstructor;
                required: false;
                default: () => {};
            };
            /**
             * Whether this component's root div should behave as an inline block or as a block.
             */
            inline: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
        }>> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "options" | "inline">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null;
        $emit: (event: string, ...args: any[]) => void;
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            /**
             * Options passed to PowerGlitch.
             * @remarks
             * The only option which will be ignored is `createContainers`, as this component always set this value to false.
             */
            options: {
                type: ObjectConstructor;
                required: false;
                default: () => {};
            };
            /**
             * Whether this component's root div should behave as an inline block or as a block.
             */
            inline: {
                type: BooleanConstructor;
                required: false;
                default: boolean;
            };
        }>>, {
            startGlitch: () => void;
            stopGlitch: () => void;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
            options: Record<string, any>;
            inline: boolean;
        }> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}>> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch(source: string | Function, cb: Function, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        /**
         * Options passed to PowerGlitch.
         * @remarks
         * The only option which will be ignored is `createContainers`, as this component always set this value to false.
         */
        options: {
            type: ObjectConstructor;
            required: false;
            default: () => {};
        };
        /**
         * Whether this component's root div should behave as an inline block or as a block.
         */
        inline: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
    }>> & import("vue").ShallowUnwrapRef<{
        startGlitch: () => void;
        stopGlitch: () => void;
    }> & {} & import("vue").ComponentCustomProperties;
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    /**
     * Options passed to PowerGlitch.
     * @remarks
     * The only option which will be ignored is `createContainers`, as this component always set this value to false.
     */
    options: {
        type: ObjectConstructor;
        required: false;
        default: () => {};
    };
    /**
     * Whether this component's root div should behave as an inline block or as a block.
     */
    inline: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
}>>, {
    startGlitch: () => void;
    stopGlitch: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {
    options: Record<string, any>;
    inline: boolean;
}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: {
        default: (_: {}) => any;
    };
});
export default _default;
